name: Auto CI

env:
  E2E_LOG_PATH: test/runtime/e2edebugLog.txt
  E2E_GINKGO_REPORT_PATH: test/runtime/ginkgoreport.json
  PERFORMANCE_SCRIPT: test/scripts/getPerformanceData.sh
  # ====modify====
  PERFORMANCE_BADGE_ID:
  PERFORMANCE_BADGE_FILENAME:

permissions: write-all
on:
  schedule:
    # each day
    - cron: "0 20 * * *"
  pull_request_target:
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      ref:
        description: 'sha, tag, branch'
        required: true
        default: main
      e2e_labels:
        description: 'e2e labels(if not set, ginkgo will run all test, multi labels separated by commas)'
        required: false
        type: string
      ipfamily:
        description: 'IP family for the e2e test'
        required: true
        type: choice
        default: 'dual'
        options:
          - ipv4
          - ipv6
          - dual
          - all

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ env.RUN_REF }}
      e2e_labels: ${{ env.RUN_E2E_LABEL }}
      unitest_enabled: ${{ env.RUN_UNITEST_ENABLED }}
      e2e_enabled: ${{ env.RUN_E2E_ENABLED }}
      ipfamily_ipv4only_e2e: ${{ env.RUN_E2E_IPV4_ONLY }}
      ipfamily_ipv6only_e2e: ${{ env.RUN_E2E_IPV6_ONLY }}
      ipfamily_dual_e2e: ${{ env.RUN_E2E_DUAL_STACK }}
    steps:
      - name: Check Code Changes
        uses: dorny/paths-filter@v2.11.1
        if: ${{ github.event_name == 'pull_request_target' }}
        id: filter_pr
        with:
          base: ${{ github.event.pull_request.base.sha }}
          ref: ${{ github.event.pull_request.head.sha }}
          filters: |
            run_e2e:
              - '**/*.sh'
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
              - 'charts/**'
              - 'Makefile*'
              - '**/Makefile*'
              - '**/Dockerfile'
            all_e2e:
              - 'test/e2e/**/*.go'
              - 'vendor/github.com/spidernet-io/**/*.go'

      - name: Get Ref
        id: get_ref
        run: |
          if ${{ github.event_name == 'workflow_dispatch' }} ; then
            echo "call by self workflow_dispatch"
            echo "RUN_TAG=${{ github.event.inputs.ref }}" >> $GITHUB_ENV
            echo "RUN_E2E_LABEL=${{ github.event.inputs.e2e_labels }}" >> $GITHUB_ENV
            echo "RUN_E2E_ENABLED=true" >> $GITHUB_ENV
            echo "RUN_UNITEST_ENABLED=true" >> $GITHUB_ENV
            if ${{ github.event.inputs.ipfamily == 'ipv4' }}; then
              echo "RUN_E2E_IPV4_ONLY=true" >> $GITHUB_ENV
              echo "RUN_E2E_IPV6_ONLY=false" >> $GITHUB_ENV
              echo "RUN_E2E_DUAL_STACK=false" >> $GITHUB_ENV
            elif ${{ github.event.inputs.ipfamily == 'ipv6' }}; then
              echo "RUN_E2E_IPV4_ONLY=false" >> $GITHUB_ENV
              echo "RUN_E2E_IPV6_ONLY=true" >> $GITHUB_ENV
              echo "RUN_E2E_DUAL_STACK=false" >> $GITHUB_ENV
            elif ${{ github.event.inputs.ipfamily == 'dual' }}; then
              echo "RUN_E2E_IPV4_ONLY=false" >> $GITHUB_ENV
              echo "RUN_E2E_IPV6_ONLY=false" >> $GITHUB_ENV
              echo "RUN_E2E_DUAL_STACK=true" >> $GITHUB_ENV
            elif ${{ github.event.inputs.ipfamily == 'all' }}; then
              echo "RUN_E2E_IPV4_ONLY=true" >> $GITHUB_ENV
              echo "RUN_E2E_IPV6_ONLY=true" >> $GITHUB_ENV
              echo "RUN_E2E_DUAL_STACK=true" >> $GITHUB_ENV
            else
              echo "error, unknown input ipfamily: ${{ github.event.inputs.ipfamily }} "
              exit 1
            fi
          elif ${{ github.event_name == 'push' }} ; then
            echo "trigger by push"
              echo "RUN_TAG=${{ github.sha }}" >> $GITHUB_ENV
              echo "RUN_E2E_LABEL=smoke" >> $GITHUB_ENV
              echo "RUN_E2E_ENABLED=true" >> $GITHUB_ENV
              # do it in another workflow
              echo "RUN_UNITEST_ENABLED=false" >> $GITHUB_ENV
              echo "RUN_E2E_IPV4_ONLY=false" >> $GITHUB_ENV
              echo "RUN_E2E_IPV6_ONLY=false" >> $GITHUB_ENV
              echo "RUN_E2E_DUAL_STACK=true" >> $GITHUB_ENV
          elif ${{ github.event_name == 'pull_request_target' }} ; then
            echo "trigger by pull_request_target"
              echo "RUN_TAG=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
            if ${{ steps.filter_pr.outputs.all_e2e == 'true' }} ; then
                # run all e2e
                echo "RUN_E2E_LABEL=" >> $GITHUB_ENV
                echo "RUN_E2E_IPV4_ONLY=true" >> $GITHUB_ENV
                echo "RUN_E2E_IPV6_ONLY=true" >> $GITHUB_ENV
                echo "RUN_E2E_DUAL_STACK=true" >> $GITHUB_ENV
            else
                echo "RUN_E2E_LABEL=smoke" >> $GITHUB_ENV
                echo "RUN_E2E_IPV4_ONLY=false" >> $GITHUB_ENV
                echo "RUN_E2E_IPV6_ONLY=false" >> $GITHUB_ENV
                echo "RUN_E2E_DUAL_STACK=true" >> $GITHUB_ENV
            fi
            echo "RUN_E2E_ENABLED=${{ steps.filter_pr.outputs.run_e2e }}" >> $GITHUB_ENV
            # do it in another workflow
            echo "RUN_UNITEST_ENABLED=false" >> $GITHUB_ENV
          else
            # schedule event
            # use main sha for ci image tag
            echo "trigger by schedule"
              echo "RUN_TAG=main" >> $GITHUB_ENV
            # nightly ci, run all e2e
              echo "RUN_E2E_LABEL=" >> $GITHUB_ENV
              echo "RUN_E2E_ENABLED=true" >> $GITHUB_ENV
              echo "RUN_UNITEST_ENABLED=true" >> $GITHUB_ENV
              echo "RUN_E2E_IPV4_ONLY=true" >> $GITHUB_ENV
              echo "RUN_E2E_IPV6_ONLY=true" >> $GITHUB_ENV
              echo "RUN_E2E_DUAL_STACK=true" >> $GITHUB_ENV
          fi

      # some event, the tag is not sha, so checkout it and get sha
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          ref: ${{ env.RUN_TAG }}

      - name: Result Ref
        id: result
        run: |
          ref=$( git show -s --format='format:%H')
          echo "RUN_REF=${ref}" >> $GITHUB_ENV

  call_unitest:
    needs: prepare
    if: ${{ needs.prepare.outputs.unitest_enabled == 'true' }}
    # forbid to specify version for local workflow, GITHUB_REF Same as the caller workflow
    uses: ./.github/workflows/lint-golang.yaml
    with:
      ref: ${{ needs.prepare.outputs.ref }}
    secrets: inherit

  call_build_ci_image:
    needs: prepare
    if: ${{ needs.prepare.outputs.e2e_enabled == 'true' }}
    # get  image:${{ needs.prepare.outputs.ref }} and image-ci:${{ needs.prepare.outputs.ref }}
    uses: ./.github/workflows/build-image-ci.yaml
    with:
      ref: ${{ needs.prepare.outputs.ref }}
    secrets: inherit

  lint_chart_against_release_image:
    needs: prepare
    if: ${{ needs.prepare.outputs.e2e_enabled == 'true' }}
    # forbid to specify version for local workflow, GITHUB_REF Same as the caller workflow
    uses: ./.github/workflows/call-lint-chart.yaml
    with:
      ref: ${{ needs.prepare.outputs.ref }}
    secrets: inherit

  call_release_chart:
    needs: [prepare]
    if: ${{ needs.prepare.outputs.e2e_enabled == 'true' }}
    uses: ./.github/workflows/call-release-chart.yaml
    with:
      ref: ${{ needs.prepare.outputs.ref }}
      submit: false
    secrets: inherit

  e2e_against_commit:
    runs-on: ubuntu-latest
    needs: [call_build_ci_image, prepare, call_release_chart]
    if: ${{ needs.prepare.outputs.e2e_enabled == 'true' }}
    steps:
      - name: Prepare
        id: prepare
        run: |
          echo "ref: ${{ needs.prepare.outputs.ref }} "
          echo "e2e_labels: ${{ needs.prepare.outputs.e2e_labels }}"
          echo "ipfamily_ipv4only_e2e: ${{ needs.prepare.outputs.ipfamily_ipv4only_e2e }}"
          echo "ipfamily_ipv6only_e2e: ${{ needs.prepare.outputs.ipfamily_ipv6only_e2e }}"
          echo "ipfamily_dual_e2e: ${{ needs.prepare.outputs.ipfamily_dual_e2e }}"
          echo "===== image "
          echo "ci image tag: ${{ needs.prepare.outputs.ref }}"
          echo "===== chart "
          echo "chart package artifact: ${{ needs.call_release_chart.outputs.artifact }}"
          TMP=` date +%m%d%H%M%S `
          E2E_CLUSTER_NAME="project${TMP}"
          echo "RUN_KIND_CLUSTER_NAME=${E2E_CLUSTER_NAME}" >> $GITHUB_ENV

      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          ref: ${{ needs.prepare.outputs.ref }}

      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.0
          id: go

      # https://github.com/helm/kind-action
      - name: Install Kind Bin
        uses: helm/kind-action@v1.4.0
        with:
          install_only: true

      # download all artifact
      # https://github.com/actions/download-artifact#download-all-artifacts
      - name: Download images
        uses: actions/download-artifact@v3
        with:
          path: output/artifact

      - name: Load And Scan Images
        run: |
          PROJECT_DIR=`pwd`
          cd output/artifact
          ls
          ALL_DIR=`ls`
          IMAGE_DIR=""
          for ITEM in $ALL_DIR ; do
              grep -E "^image-tar" <<< "${ITEM}" &>/dev/null && IMAGE_DIR+=" ${ITEM} "
          done
          echo "IMAGE_DIR=${IMAGE_DIR}"
          for ITEM in $IMAGE_DIR ; do
              TAR_FILES=`ls ${ITEM}`
              for TAR in $TAR_FILES ; do
                echo "image tar ${ITEM}/${TAR}"
                cat ${ITEM}/${TAR} |  docker import - ${TAR%*.tar}:${{ needs.prepare.outputs.ref }}
                echo "---------trivy checkout image ${TAR%*.tar}:${{ needs.prepare.outputs.ref }} --------------------"
                make -C ${PROJECT_DIR} lint_image_trivy -e IMAGE_NAME=${TAR%*.tar}:${{ needs.prepare.outputs.ref }} \
                    || { echo "RUN_IMAGE_TRIVY_FAIL=true" >> $GITHUB_ENV ; echo "error, image ${TAR%*.tar}:${{ needs.prepare.outputs.ref }} is bad" ; }
              done
          done
          docker images

      # ------------- by default , dual stack
      # test against commit version
      - name: Setup Kind Cluster For Dual-stack
        if: ${{ needs.prepare.outputs.ipfamily_dual_e2e == 'true' }}
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          shell: bash
          command: |
            make e2e_init -e E2E_KIND_CLUSTER_NAME=${{ env.RUN_KIND_CLUSTER_NAME }} \
                -e PROJECT_IMAGE_VERSION=${{ needs.prepare.outputs.ref }} \
                -e E2E_IP_FAMILY=dual

      - name: Run e2e Test For Dual-stack
        id: dualstack_e2e
        if: ${{ needs.prepare.outputs.ipfamily_dual_e2e == 'true' }}
        continue-on-error: true
        run: |
          echo ${{ github.event.inputs.labels }}
          RESULT=0
          make e2e_run -e E2E_KIND_CLUSTER_NAME=${{ env.RUN_KIND_CLUSTER_NAME }}  \
              -e E2E_GINKGO_LABELS=${{ needs.prepare.outputs.e2e_labels }} \
              -e E2E_IP_FAMILY=dual || RESULT=1
          if ((RESULT==0)) ; then
              echo "RUN_PASS=true" >> $GITHUB_ENV
          else
              echo "RUN_PASS=false" >> $GITHUB_ENV
          fi
          if [ -f "${{ env.E2E_LOG_PATH }}" ] ; then
              echo "RUN_UPLOAD_LOG=true" >> $GITHUB_ENV
          else
              echo "RUN_UPLOAD_LOG=false" >> $GITHUB_ENV
          fi
          if [ -f "${{ env.E2E_GINKGO_REPORT_PATH }}" ] ; then
              echo "RUN_UPLOAD_E2E_REPORT=true" >> $GITHUB_ENV
          else
              echo "RUN_UPLOAD_E2E_REPORT=false" >> $GITHUB_ENV
          fi

      - name: Upload e2e cluster log For Dual-stack
        if: ${{ needs.prepare.outputs.ipfamily_dual_e2e == 'true' }}
        uses: actions/upload-artifact@v3.1.1
        with:
          name: dualstack-debuglog.txt
          path: ${{ env.E2E_LOG_PATH }}
          retention-days: 30

      - name: Upload e2e ginkgo report For Dual-stack
        if: ${{ env.RUN_UPLOAD_LOG == 'true' && needs.prepare.outputs.ipfamily_dual_e2e == 'true' }}
        uses: actions/upload-artifact@v3.1.1
        with:
          name: dualstack-e2ereport.json
          path: ${{ env.E2E_GINKGO_REPORT_PATH }}
          retention-days: 30

      - name: Show e2e Result For Dual-stack
        if: ${{ needs.prepare.outputs.ipfamily_dual_e2e == 'true' }}
        run: |
          if ${{ env.RUN_PASS == 'true' }} ;then
              exit 0
          else
              exit 1
          fi

      - name: Get the E2E Performance Result For Dual-stack
        # run all e2e cases
        id: get_performance
        if: ${{ needs.prepare.outputs.ipfamily_dual_e2e == 'true' && env.PERFORMANCE_BADGE_ID != ''}}
        shell: bash
        run: |
          # sudo apt-get install -y jq
          TOOL_PATH=${{ env.PERFORMANCE_SCRIPT }}
          TODO_STATUS=$( ${TOOL_PATH}  "${{ env.E2E_GINKGO_REPORT_PATH }}"  )
          echo "RUN_PERFORMANCE_RESULT=${TODO_STATUS}" >> $GITHUB_ENV

      - name: Update Badge For Dual-stack
        if: ${{ env.RUN_PERFORMANCE_RESULT != '' && needs.prepare.outputs.ipfamily_dual_e2e == 'true' && env.PERFORMANCE_BADGE_ID != '' }}
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.WELAN_PAT }}
          gistID: ${{ env.PERFORMANCE_BADGE_ID }}
          filename: ${{ env.PERFORMANCE_BADGE_FILENAME }}
          label: performance
          message: ${{ steps.get_performance.outputs.result }}
          color: lightgrey

#      # ------------------ ipv4-only
#      # test against commit version
#      - name: Setup Kind Cluster For ipv4-only
#        if: ${{ needs.prepare.outputs.ipfamily_ipv4only_e2e == 'true' }}
#        uses: nick-invision/retry@v2
#        with:
#          timeout_minutes: 10
#          max_attempts: 3
#          shell: bash
#          command: |
#            make e2e_init -e KIND_CLUSTER_NAME=${{ steps.prepare.outputs.clusterName }} \
#                -e TEST_IMAGE_TAG=${{ needs.call_build_ci_image.outputs.imageTag }} \
#                -e SPIDERPOOL_AGENT_IMAGE_NAME=spiderpool-agent-race   \
#                -e SPIDERPOOL_CONTROLLER_IMAGE_NAME=spiderpool-controller-race \
#                -e E2E_IP_FAMILY=ipv4
#
#      - name: Run e2e Test For ipv4-only
#        id: ipv4only_e2e
#        if: ${{ needs.prepare.outputs.ipfamily_ipv4only_e2e == 'true' }}
#        continue-on-error: true
#        run: |
#          echo ${{ github.event.inputs.labels }}
#          RESULT=0
#          make e2e_test -e KIND_CLUSTER_NAME=${{ steps.prepare.outputs.clusterName }}  \
#              -e E2E_GINKGO_LABELS=${{ needs.prepare.outputs.e2e_labels }} \
#              -e E2E_TIMEOUT=${{ env.E2E_TIME_OUT }}  \
#              -e E2E_IP_FAMILY=ipv4 -e PYROSCOPE_LOCAL_PORT="" || RESULT=1
#          if ((RESULT==0)) ; then
#              echo ::set-output name=pass::true
#          else
#              echo ::set-output name=pass::false
#          fi
#          if [ -f "test/e2edebugLog" ] ; then
#              echo ::set-output name=updaloadlog::true
#          else
#              echo ::set-output name=updaloadlog::false
#          fi
#          if [ -f "./e2ereport.json" ] ; then
#              echo "error, did not find e2e report"
#              echo ::set-output name=upload::true
#          else
#              echo ::set-output name=upload::false
#          fi
#
#      - name: Upload e2e log For ipv4-only
#        if: ${{ needs.prepare.outputs.ipfamily_ipv4only_e2e == 'true' }}
#        uses: actions/upload-artifact@v3.1.1
#        with:
#          name: ipv4Only-debuglog.txt
#          path: test/e2edebugLog.txt
#          retention-days: 30
#
#      - name: Upload e2e report For ipv4-only
#        if: ${{ steps.ipv4only_e2e.outputs.upload == 'true' && needs.prepare.outputs.ipfamily_ipv4only_e2e == 'true' }}
#        uses: actions/upload-artifact@v3.1.1
#        with:
#          name: ipv4Only-e2ereport.json
#          path: e2ereport.json
#          retention-days: 14
#
#      - name: Show e2e Result For ipv4-only
#        if: ${{ needs.prepare.outputs.ipfamily_ipv4only_e2e == 'true' }}
#        run: |
#          if ${{ steps.ipv4only_e2e.outputs.pass == 'true' }} ;then
#              exit 0
#          else
#              exit 1
#          fi
#
#      # ------------------ ipv6-only
#      # test against commit version
#      - name: Setup Kind Cluster For ipv6-only
#        if: ${{ needs.prepare.outputs.ipfamily_ipv6only_e2e == 'true' }}
#        uses: nick-invision/retry@v2
#        with:
#          timeout_minutes: 10
#          max_attempts: 3
#          shell: bash
#          command: |
#            make e2e_init -e KIND_CLUSTER_NAME=${{ steps.prepare.outputs.clusterName }} \
#                -e TEST_IMAGE_TAG=${{ needs.call_build_ci_image.outputs.imageTag }} \
#                -e SPIDERPOOL_AGENT_IMAGE_NAME=spiderpool-agent-race   \
#                -e SPIDERPOOL_CONTROLLER_IMAGE_NAME=spiderpool-controller-race \
#                -e E2E_IP_FAMILY=ipv6 -e PYROSCOPE_LOCAL_PORT=""
#
#      - name: Run e2e Test For ipv6-only
#        id: ipv6only_e2e
#        if: ${{ needs.prepare.outputs.ipfamily_ipv6only_e2e == 'true' }}
#        continue-on-error: true
#        run: |
#          echo ${{ github.event.inputs.labels }}
#          RESULT=0
#          make e2e_test -e KIND_CLUSTER_NAME=${{ steps.prepare.outputs.clusterName }}  \
#              -e E2E_GINKGO_LABELS=${{ needs.prepare.outputs.e2e_labels }} \
#              -e E2E_TIMEOUT=${{ env.E2E_TIME_OUT }}  \
#              -e E2E_IP_FAMILY=ipv6 -e PYROSCOPE_LOCAL_PORT="" || RESULT=1
#          if ((RESULT==0)) ; then
#              echo ::set-output name=pass::true
#          else
#              echo ::set-output name=pass::false
#          fi
#          if [ -f "test/e2edebugLog" ] ; then
#              echo ::set-output name=updaloadlog::true
#          else
#              echo ::set-output name=updaloadlog::false
#          fi
#          if [ -f "./e2ereport.json" ] ; then
#              echo "error, did not find e2e report"
#              echo ::set-output name=upload::true
#          else
#              echo ::set-output name=upload::false
#          fi
#
#      - name: Upload e2e log For ipv6-only
#        if: ${{ needs.prepare.outputs.ipfamily_ipv6only_e2e == 'true' }}
#        uses: actions/upload-artifact@v3.1.1
#        with:
#          name: ipv6Only-debuglog.txt
#          path: test/e2edebugLog.txt
#          retention-days: 30
#
#      - name: Upload e2e report For ipv6-only
#        if: ${{ steps.ipv6only_e2e.outputs.upload == 'true' && needs.prepare.outputs.ipfamily_ipv6only_e2e == 'true' }}
#        uses: actions/upload-artifact@v3.1.1
#        with:
#          name: ipv6Only-e2ereport.json
#          path: e2ereport.json
#          retention-days: 14
#
#      - name: Show e2e Result For ipv6-only
#        if: ${{ needs.prepare.outputs.ipfamily_ipv6only_e2e == 'true' }}
#        run: |
#          if ${{ steps.ipv6only_e2e.outputs.pass == 'true' }} ;then
#              exit 0
#          else
#              exit 1
#          fi

      - name: Show Trivy Scan Report
        run: |
          if [ "${{ env.RUN_IMAGE_TRIVY_FAIL }}" == "true" ] ; then
              echo "error, image is not secure, see detail on Step 'Load And Scan Images' "
              exit 1
          else
              exit 0
          fi