
## @section Global parameters
##
global:
  ## @param global.imageRegistryOverride The global image registry override
  imageRegistryOverride: ""
  ## @param global.imageTagOverride The global image tag override
  imageTagOverride: ""
  ## @param global.name instance name
  ## default egressgateway
  name: "egressgateway"
  ## @param global.clusterDnsDomain cluster dns domain
  clusterDnsDomain: "cluster.local"
  ## @param global.commonAnnotations Annotations to add to all deployed objects
  commonAnnotations: {}
  ## @param global.commonLabels Labels to add to all deployed objects
  commonLabels: {}
  #  label1: v1
  #  label2: v2

  ## @param global.configName the configmap name
  configName: "egressgateway"
## @section Feature parameters
feature:
  ## @param feature.enableIPv4 Enable IPv4
  enableIPv4: true
  ## @param feature.enableIPv6 Enable IPv6
  enableIPv6: false
  ## @param feature.datapathMode iptables mode, [`iptables`, `ebpf`]
  datapathMode: "iptables"
  ## @param feature.tunnelIpv4Subnet Tunnel IPv4 subnet
  tunnelIpv4Subnet: "172.31.0.0/16"
  ## @param feature.tunnelIpv6Subnet Tunnel IPv6 subnet
  tunnelIpv6Subnet: "fd11::/112"
  ## @param feature.tunnelDetectMethod Tunnel base on which interface [`defaultRouteInterface`, `interface=eth0`]
  tunnelDetectMethod: "defaultRouteInterface"
  iptables:
    ## @param feature.iptables.backendMode Iptables mode can be specified as `nft` or `legacy`, with `auto` meaning automatic detection. The default value is `auto`.
    backendMode: "auto"
  vxlan:
    ## @param feature.vxlan.name The name of VXLAN device
    name: "egress.vxlan"
    ## @param feature.vxlan.port VXLAN port
    port: 7789
    ## @param feature.vxlan.id VXLAN ID
    id: 100
    ## @param feature.vxlan.disableChecksumOffload Disable checksum offload
    disableChecksumOffload: true
  clusterCIDR:
    autoDetect:
      ## @param feature.clusterCIDR.autoDetect.podCidrMode cni cluster used, it can be specified as `k8s`, `calico`, `auto` or `""`. The default value is `auto`.
      podCidrMode: "auto"
      ## @param feature.clusterCIDR.autoDetect.clusterIP if ignore service ip
      clusterIP: true
      ## @param feature.clusterCIDR.autoDetect.nodeIP if ignore node ip
      nodeIP: true
    ## @param feature.clusterCIDR.extraCidr CIDRs provided manually
    extraCidr: []
  ## @param feature.maxNumberEndpointPerSlice max number of endpoints per slice
  maxNumberEndpointPerSlice: 100
  ## @param feature.announcedInterfacesToExclude The list of network interface excluded for announcing Egress IP.
  announcedInterfacesToExclude:
    - "^cali.*"
    - "br-*"

## @section Egressgateway agent parameters
##
agent:
  ## @param agent.name The name of the egressgateway agent
  name: "egressgateway-agent"
  ## @param agent.cmdBinName The binary name of egressgateway agent
  cmdBinName: "/usr/bin/agent"
  ## @param agent.hostNetwork Enable the host network mode for the egressgateway agent Pod.
  hostNetwork: true
  image:
    ## @param agent.image.registry The image registry of egressgateway agent
    registry: ghcr.io
    ## @param agent.image.repository The image repository of egressgateway agent
    repository: spidernet-io/egressgateway-agent
    ## @param agent.image.pullPolicy The image pull policy of egressgateway agent
    pullPolicy: IfNotPresent
    ## @param agent.image.digest The image digest of egressgateway agent, which takes preference over tag
    digest: ""
    ## @param agent.image.tag The image tag of egressgateway agent, overrides the image tag whose default is the chart appVersion.
    tag: "v0.2.0-rc2"
    ## @param agent.image.imagePullSecrets the image pull secrets of egressgateway agent
    imagePullSecrets: []
    # - name: "image-pull-secret"
  ## @skip agent.nodeSelector.kubernetes.io/os
  nodeSelector:
    kubernetes.io/os: linux
  serviceAccount:
    ## @param agent.serviceAccount.create Create the service account for the egressgateway agent
    create: true
    ## @param agent.serviceAccount.annotations The annotations of egressgateway agent service account
    annotations: {}
  ## @skip agent.updateStrategy.rollingUpdate.maxUnavailable
  ## @skip agent.updateStrategy.type
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  service:
    ## @param agent.service.annotations The annotations for egressgateway agent service
    annotations: {}
    ## @param agent.service.type The type of Service for egressgateway agent
    type: ClusterIP
  ## @skip agent.tolerations
  tolerations:
    - operator: Exists
  ## @param agent.priorityClassName The priority Class Name for egressgateway agent
  priorityClassName: "system-node-critical"
  ## @param agent.affinity The affinity of egressgateway agent
  affinity: {}
  ## @param agent.extraArgs The additional arguments of egressgateway agent container
  extraArgs: []
  ## @param agent.extraEnv The additional environment variables of egressgateway agent container
  extraEnv: []
  ## @param agent.extraVolumes The additional volumes of egressgateway agent container
  extraVolumes: []
  ## @param agent.extraVolumeMounts The additional hostPath mounts of egressgateway agent container
  extraVolumeMounts: []
  ## @param agent.podAnnotations The additional annotations of egressgateway agent pod
  podAnnotations: {}
  ## @param agent.podLabels The additional label of egressgateway agent pod
  podLabels: {}
  resources:
    ## @param agent.resources.limits.cpu The cpu limit of egressgateway agent pod
    ## @param agent.resources.limits.memory The memory limit of egressgateway agent pod
    ## @param agent.resources.requests.cpu The cpu requests of egressgateway agent pod
    ## @param agent.resources.requests.memory The memory requests of egressgateway agent pod
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  ## @param agent.securityContext The security Context of egressgateway agent pod
  securityContext: {}
  # runAsUser: 0

  healthServer:
    ## @param agent.healthServer.port The http port for health checking of the egressgateway agent.
    port: 5810
    startupProbe:
      ## @param agent.healthServer.startupProbe.failureThreshold The failure threshold of startup probe for egressgateway agent health checking
      failureThreshold: 60
      ## @param agent.healthServer.startupProbe.periodSeconds The period seconds of startup probe for egressgateway agent health checking
      periodSeconds: 2
    livenessProbe:
      ## @param agent.healthServer.livenessProbe.failureThreshold The failure threshold of startup probe for egressgateway agent health checking
      failureThreshold: 6
      ## @param agent.healthServer.livenessProbe.periodSeconds The period seconds of startup probe for egressgateway agent health checking
      periodSeconds: 10
    readinessProbe:
      ## @param agent.healthServer.readinessProbe.failureThreshold The failure threshold of startup probe for egressgateway agent health checking
      failureThreshold: 3
      ## @param agent.healthServer.readinessProbe.periodSeconds The period seconds of startup probe for egressgateway agent health checking
      periodSeconds: 10
  prometheus:
    ## @param agent.prometheus.enabled Enable template agent to collect metrics
    enabled: false
    ## @param agent.prometheus.port The metrics port of template agent
    port: 5811
    serviceMonitor:
      ## @param agent.prometheus.serviceMonitor.install Install ServiceMonitor for egressgateway. This requires the prometheus CRDs to be available
      install: false
      ## @param agent.prometheus.serviceMonitor.namespace The namespace of ServiceMonitor. Default to the namespace of helm instance
      namespace: ""
      ## @param agent.prometheus.serviceMonitor.annotations The additional annotations of egressgateway agent ServiceMonitor
      annotations: {}
      ## @param agent.prometheus.serviceMonitor.labels The additional label of egressgateway agent ServiceMonitor
      labels: {}
    prometheusRule:
      ## @param agent.prometheus.prometheusRule.install Install prometheusRule for template agent. This requires the prometheus CRDs to be available
      install: false
      ## @param agent.prometheus.prometheusRule.namespace The prometheus rule namespace. Default to the namespace of helm instance
      namespace: ""
      ## @param agent.prometheus.prometheusRule.annotations The additional annotations of egressgateway agent prometheusRule
      annotations: {}
      ## @param agent.prometheus.prometheusRule.labels The additional label of egressgateway agent prometheusRule
      labels: {}
    grafanaDashboard:
      ## @param agent.prometheus.grafanaDashboard.install To install the Grafana dashboard for the egress gateway agent, the availability of Prometheus CRDs is required.
      install: false
      ## @param agent.prometheus.grafanaDashboard.namespace The grafana dashboard namespace. Default to the namespace of helm instance
      namespace: ""
      ## @param agent.prometheus.grafanaDashboard.annotations The additional annotations of egressgateway agent grafanaDashboard
      annotations: {}
      ## @param agent.prometheus.grafanaDashboard.labels The additional label of egressgateway agent grafanaDashboard
      labels: {}
  debug:
    ## @param agent.debug.logLevel The log level of egress gateway agent [`debug`, `info`, `warn`, `error`, `fatal`, `panic`]
    logLevel: "info"
    ## @param agent.debug.logEncoder Set the type of log encoder (`json`, `console`)
    logEncoder: "json"
    ## @param agent.debug.logWithCaller Enable or disable logging with caller information (`true`/`false`)
    logWithCaller: true
    ## @param agent.debug.logUseDevMode Enable or disable development mode for logging (`true`/`false`)
    logUseDevMode: true
    ## @param agent.debug.gopsPort The port used by gops tool for process monitoring and performance tuning.
    gopsPort: 5812
    ## @param agent.debug.pyroscopeServerAddr The address of the Pyroscope server.
    pyroscopeServerAddr: ""
## @section Egressgateway controller parameters
##
controller:
  ## @param controller.name The egressgateway controller name
  name: "egressgateway-controller"
  ## @param controller.replicas The replicas number of egressgateway controller
  replicas: 1
  ## @param controller.cmdBinName The binary name of egressgateway controller
  cmdBinName: "/usr/bin/controller"
  ## @param controller.hostNetwork Enable host network mode of egressgateway controller pod. Notice, if no CNI available before template installation, must enable this
  hostNetwork: false
  image:
    ## @param controller.image.registry The image registry of egressgateway controller
    registry: ghcr.io
    ## @param controller.image.repository The image repository of egressgateway controller
    repository: spidernet-io/egressgateway-controller
    ## @param controller.image.pullPolicy The image pullPolicy of egressgateway controller
    pullPolicy: IfNotPresent
    ## @param controller.image.digest The image digest of egressgatewayController, which takes preference over tag
    digest: ""
    ## @param controller.image.tag The image tag of egressgateway controller, overrides the image tag whose default is the chart appVersion.
    tag: "v0.2.0-rc2"
    ## @param controller.image.imagePullSecrets The image pull secrets of egressgateway controller
    imagePullSecrets: []
    # - name: "image-pull-secret"
  ## @skip controller.nodeSelector.kubernetes.io/os
  nodeSelector:
    kubernetes.io/os: linux
  serviceAccount:
    ## @param controller.serviceAccount.create Create the service account for the egressgateway controller
    create: true
    ## @param controller.serviceAccount.annotations The annotations of egressgateway controller service account
    annotations: {}
  service:
    ## @param controller.service.annotations The annotations for egressgateway controller service
    annotations: {}
    ## @param controller.service.type The type for egressgateway controller service
    type: ClusterIP
  ## @skip controller.tolerations
  tolerations:
    - operator: Exists
  ## @param controller.priorityClassName The priority class name for egressgateway controller
  priorityClassName: "system-node-critical"
  ## @param controller.affinity The affinity of egressgateway controller
  affinity: {}
  ## @param controller.extraArgs The additional arguments of egressgateway controller container
  extraArgs: []
  ## @param controller.extraEnv The additional environment variables of egressgateway controller container
  extraEnv: []
  ## @param controller.extraVolumes The additional volumes of egressgateway controller container
  extraVolumes: []
  # - name: test-val
  #   mountPath: /host/tmp

  ## @param controller.extraVolumeMounts The additional hostPath mounts of egressgateway controller container
  extraVolumeMounts: []
  # - name: test-val
  #   mountPath: /tmp

  ## @param controller.podAnnotations The additional annotations of egressgateway controller pod
  podAnnotations: {}
  # test: 100

  ## @param controller.podLabels The additional label of egressgateway controller pod
  podLabels: {}
  ## @param controller.securityContext The security Context of egressgateway controller pod
  securityContext: {}
  # runAsUser: 0

  resources:
    ## @param controller.resources.limits.cpu The cpu limit of egressgateway controller pod
    ## @param controller.resources.limits.memory The memory limit of egressgateway controller pod
    ## @param controller.resources.requests.cpu The cpu requests of egressgateway controller pod
    ## @param controller.resources.requests.memory The memory requests of egressgateway controller pod
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  podDisruptionBudget:
    ## @param controller.podDisruptionBudget.enabled Enable podDisruptionBudget for egressgateway controller pod
    enabled: false
    ## @param controller.podDisruptionBudget.minAvailable Minimum number/percentage of pods that should remain scheduled.
    minAvailable: 1
  healthServer:
    ## @param controller.healthServer.port The http Port for egressgatewayController, for health checking and http service
    port: 5820
    startupProbe:
      ## @param controller.healthServer.startupProbe.failureThreshold The failure threshold of startup probe for egressgateway controller health checking
      failureThreshold: 30
      ## @param controller.healthServer.startupProbe.periodSeconds The period seconds of startup probe for egressgatewayController health checking
      periodSeconds: 2
    livenessProbe:
      ## @param controller.healthServer.livenessProbe.failureThreshold The failure threshold of startup probe for egressgateway controller health checking
      failureThreshold: 6
      ## @param controller.healthServer.livenessProbe.periodSeconds The period seconds of startup probe for egressgatewayController health checking
      periodSeconds: 10
    readinessProbe:
      ## @param controller.healthServer.readinessProbe.failureThreshold The failure threshold of startup probe for egressgateway controller health checking
      failureThreshold: 3
      ## @param controller.healthServer.readinessProbe.periodSeconds The period seconds of startup probe for egressgateway controller health checking
      periodSeconds: 10
  ## @param controller.webhookPort The http port for egressgatewayController webhook
  webhookPort: 5822
  prometheus:
    ## @param controller.prometheus.enabled Enable egress gateway controller to collect metrics
    enabled: false
    ## @param controller.prometheus.port The metrics port of egress gateway controller
    port: 5821
    serviceMonitor:
      ## @param controller.prometheus.serviceMonitor.install Install ServiceMonitor for egress gateway agent. This requires the prometheus CRDs to be available
      install: false
      ## @param controller.prometheus.serviceMonitor.namespace The serviceMonitor namespace. Default to the namespace of helm instance
      namespace: ""
      ## @param controller.prometheus.serviceMonitor.annotations The additional annotations of egressgatewayController serviceMonitor
      annotations: {}
      ## @param controller.prometheus.serviceMonitor.labels The additional label of egressgatewayController serviceMonitor
      labels: {}
    prometheusRule:
      ## @param controller.prometheus.prometheusRule.install Install prometheusRule for egress gateway agent. This requires the prometheus CRDs to be available
      install: false
      ## @param controller.prometheus.prometheusRule.namespace The prometheusRule namespace. Default to the namespace of helm instance
      namespace: ""
      ## @param controller.prometheus.prometheusRule.annotations The additional annotations of egressgatewayController prometheus rule
      annotations: {}
      ## @param controller.prometheus.prometheusRule.labels The additional label of egressgateway controller prometheus rule
      labels: {}
    grafanaDashboard:
      ## @param controller.prometheus.grafanaDashboard.install Install grafana dashboard for egress gateway agent. This requires the prometheus CRDs to be available
      install: false
      ## @param controller.prometheus.grafanaDashboard.namespace The grafanaDashboard namespace. Default to the namespace of helm instance
      namespace: ""
      ## @param controller.prometheus.grafanaDashboard.annotations The additional annotations of egressgatewayController grafanaDashboard
      annotations: {}
      ## @param controller.prometheus.grafanaDashboard.labels The additional label of egressgatewayController grafanaDashboard
      labels: {}
  debug:
    ## @param controller.debug.logLevel The log level of egress gateway controller [`debug`, `info`, `warn`, `error`, `fatal`, `panic`]
    logLevel: "info"
    ## @param controller.debug.logEncoder Set the type of log encoder (`json`, `console`)
    logEncoder: "json"
    ## @param controller.debug.logWithCaller Enable or disable logging with caller information (`true`/`false`)
    logWithCaller: true
    ## @param controller.debug.logUseDevMode Enable or disable development mode for logging (`true`/`false`)
    logUseDevMode: true
    ## @param controller.debug.gopsPort The port used by gops tool for process monitoring and performance tuning.
    gopsPort: 5824
    ## @param controller.debug.pyroscopeServerAddr The address of the Pyroscope server.
    pyroscopeServerAddr: ""
  ## TLS configuration for webhook
  tls:
    ## @param controller.tls.method the method for generating TLS certificates. [`provided`, `certmanager`, `auto`]
    ## - provided:     provide all certificates by helm options
    ## - certmanager:  This method use cert-manager to generate & rotate certificates.
    ## - auto:         Auto generate cert.
    method: auto
    ## @param controller.tls.secretName The secret name for storing TLS certificates
    secretName: "egressgateway-controller-server-certs"
    ## for certmanager method
    certmanager:
      ## @param controller.tls.certmanager.certValidityDuration Generated certificates validity duration in days for 'certmanager' method
      certValidityDuration: 365
      ## @param controller.tls.certmanager.issuerName Issuer name of cert manager 'certmanager'. If not specified, a CA issuer will be created.
      issuerName: ""
      ## @param controller.tls.certmanager.extraDnsNames Extra DNS names added to certificate when it's auto generated
      extraDnsNames: []
      ## @param controller.tls.certmanager.extraIPAddresses Extra IP addresses added to certificate when it's auto generated
      extraIPAddresses: []
    ## for provided method
    provided:
      ## @param controller.tls.provided.tlsCert Encoded tls certificate for provided method
      ## @param controller.tls.provided.tlsKey Encoded tls key for provided method
      ## @param controller.tls.provided.tlsCa Encoded tls CA for provided method
      tlsCert: ""
      tlsKey: ""
      tlsCa: ""
    ## for auto method
    auto:
      ## @param controller.tls.auto.caExpiration CA expiration for auto method
      # in day, default 200 years
      caExpiration: '73000'
      ## @param controller.tls.auto.certExpiration Server cert expiration for auto method
      # in day, default 200 years
      certExpiration: '73000'
      ## @param controller.tls.auto.extraIpAddresses Extra IP addresses of server certificate for auto method
      extraIpAddresses: []
      ## @param controller.tls.auto.extraDnsNames Extra DNS names of server cert for auto method
      extraDnsNames: []
