
## @section Global parameters
##
global:
  ## @param global.imageRegistryOverride The global image registry override1
  imageRegistryOverride: ""

  ## @param global.imageTagOverride The global image tag override
  imageTagOverride: ""

  ## @param global.name instance name
  ## default egressgateway
  name: "egressgateway"

  ## @param global.clusterDnsDomain cluster dns domain
  clusterDnsDomain: "cluster.local"

  ## @param global.commonAnnotations Annotations to add to all deployed objects
  commonAnnotations: {}

  ## @param global.commonLabels Labels to add to all deployed objects
  commonLabels: {}
  #  label1: v1
  #  label2: v2

  ## @param global.configName the configmap name
  configName: "egressgateway"

## @section feature parameters
feature:
  ## @param feature.enableIPv4 enable IPv4
  enableIPv4: true

  ## @param feature.enableIPv6 enable IPv6
  enableIPv6: false

  ## @param feature.startRouteTable start route table
  startRouteTable: 50

  ## @param feature.iptables settings
  iptables:

    ## @param feature.iptables.backendMode The mode for iptables (`legacy` or `nft`). If left blank, it's automatically detected. Default: "".
    backendMode: ""

  ## @param feature.datapathMode iptables mode,[`iptables`, `ebpf`]
  datapathMode: "iptables"

  ## @param feature.tunnelIpv4Subnet Tunnel IPv4 subnet
  tunnelIpv4Subnet: "172.31.0.0/16"

  ## @param feature.tunnelIpv6Subnet Tunnel IPv6 subnet
  tunnelIpv6Subnet: "fd11::/112"

  ## @param feature.tunnelDetectMethod Tunnel base on which interface [`defaultRouteInterface`, `interface=eth0`]
  tunnelDetectMethod: "defaultRouteInterface"

  ## @param feature.forwardMethod Tunnel base on which interface [`active-active`: require kernel >=4.4, `active-passive`]
  forwardMethod: "active-passive"

  ## @section vxlan parameters
  vxlan:
    ## @param feature.vxlan.name vxlan device name
    name: "egress.vxlan"

    ## @param feature.vxlan.port vxlan port
    port: "7789"

    ## @param feature.vxlan.id vxlan id
    id: "100"

    ## @param feature.vxlan.disableChecksumOffload disable checksum offload
    disableChecksumOffload: true


## @section egressgatewayAgent parameters
##
egressgatewayAgent:
  ## @param egressgatewayAgent.name the egressgatewayAgent name
  name: "egressgateway-agent"

  ## @param egressgatewayAgent.cmdBinName the binary name of egressgatewayAgent
  cmdBinName: "/usr/bin/agent"

  ## @param egressgatewayAgent.hostNetwork enable host network mode of egressgatewayAgent pod
  hostNetwork: true

  image:
    ## @param egressgatewayAgent.image.registry the image registry of egressgatewayAgent
    registry: ghcr.io

    ## @param egressgatewayAgent.image.repository the image repository of egressgatewayAgent
    repository: spidernet-io/egressgateway-agent

    ## @param egressgatewayAgent.image.pullPolicy the image pullPolicy of egressgatewayAgent
    pullPolicy: IfNotPresent

    ## @param egressgatewayAgent.image.digest the image digest of egressgatewayAgent, which takes preference over tag
    digest: ""

    ## @param egressgatewayAgent.image.tag the image tag of egressgatewayAgent, overrides the image tag whose default is the chart appVersion.
    tag: ""

    ## @param egressgatewayAgent.image.imagePullSecrets the image imagePullSecrets of egressgatewayAgent
    imagePullSecrets: []
    # - name: "image-pull-secret"

  ## @skip egressgatewayAgent.nodeSelector.kubernetes.io/os
  nodeSelector:
    kubernetes.io/os: linux

  serviceAccount:
    ## @param egressgatewayAgent.serviceAccount.create create the service account for the egressgatewayAgent
    create: true
    ## @param egressgatewayAgent.serviceAccount.annotations the annotations of egressgatewayAgent service account
    annotations: {}

  ## @skip egressgatewayAgent.updateStrategy.rollingUpdate.maxUnavailable
  ## @skip egressgatewayAgent.updateStrategy.type
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate

  service:
    ## @param egressgatewayAgent.service.annotations the annotations for egressgatewayAgent service
    annotations: {}
    ## @param egressgatewayAgent.service.type the type for egressgatewayAgent service
    type: ClusterIP

  ## @skip egressgatewayAgent.tolerations
  # --  Node tolerations
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    - key: node.kubernetes.io/not-ready
      effect: NoSchedule
    - key: node-role.kubernetes.io/master
      effect: NoSchedule
    - key: node-role.kubernetes.io/control-plane
      effect: NoSchedule
    - key: CriticalAddonsOnly
      operator: Exists

  ## @param egressgatewayAgent.priorityClassName the priority Class Name for egressgatewayAgent
  priorityClassName: "system-node-critical"

  ## @param egressgatewayAgent.affinity the affinity of egressgatewayAgent
  affinity: {}

  ## @param egressgatewayAgent.extraArgs the additional arguments of egressgatewayAgent container
  extraArgs: []

  ## @param egressgatewayAgent.extraEnv the additional environment variables of egressgatewayAgent container
  extraEnv: []

  ## @param egressgatewayAgent.extraVolumes the additional volumes of egressgatewayAgent container
  extraVolumes: []

  ## @param egressgatewayAgent.extraVolumeMounts the additional hostPath mounts of egressgatewayAgent container
  extraVolumeMounts: []

  ## @param egressgatewayAgent.podAnnotations the additional annotations of egressgatewayAgent pod
  podAnnotations: {}

  ## @param egressgatewayAgent.podLabels the additional label of egressgatewayAgent pod
  podLabels: {}

  resources:
    ## @param egressgatewayAgent.resources.limits.cpu the cpu limit of egressgatewayAgent pod
    ## @param egressgatewayAgent.resources.limits.memory the memory limit of egressgatewayAgent pod
    ## @param egressgatewayAgent.resources.requests.cpu the cpu requests of egressgatewayAgent pod
    ## @param egressgatewayAgent.resources.requests.memory the memory requests of egressgatewayAgent pod
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

  ## @param egressgatewayAgent.securityContext the security Context of egressgatewayAgent pod
  securityContext: {}
  # runAsUser: 0

  healthServer:
    ## @param egressgatewayAgent.healthServer.port the http Port for egressgatewayAgent, for health checking
    port: 5810

    startupProbe:
      ## @param egressgatewayAgent.healthServer.startupProbe.failureThreshold the failure threshold of startup probe for egressgatewayAgent health checking
      failureThreshold: 60
      ## @param egressgatewayAgent.healthServer.startupProbe.periodSeconds the period seconds of startup probe for egressgatewayAgent health checking
      periodSeconds: 2

    livenessProbe:
      ## @param egressgatewayAgent.healthServer.livenessProbe.failureThreshold the failure threshold of startup probe for egressgatewayAgent health checking
      failureThreshold: 6
      ## @param egressgatewayAgent.healthServer.livenessProbe.periodSeconds the period seconds of startup probe for egressgatewayAgent health checking
      periodSeconds: 10

    readinessProbe:
      ## @param egressgatewayAgent.healthServer.readinessProbe.failureThreshold the failure threshold of startup probe for egressgatewayAgent health checking
      failureThreshold: 3
      ## @param egressgatewayAgent.healthServer.readinessProbe.periodSeconds the period seconds of startup probe for egressgatewayAgent health checking
      periodSeconds: 10

  prometheus:
    ## @param egressgatewayAgent.prometheus.enabled enable template agent to collect metrics
    enabled: false

    ## @param egressgatewayAgent.prometheus.port the metrics port of template agent
    port: 5811

    serviceMonitor:
      ## @param egressgatewayAgent.prometheus.serviceMonitor.install install serviceMonitor for template agent. This requires the prometheus CRDs to be available
      install: false

      ## @param egressgatewayAgent.prometheus.serviceMonitor.namespace the serviceMonitor namespace. Default to the namespace of helm instance
      namespace: ""

      ## @param egressgatewayAgent.prometheus.serviceMonitor.annotations the additional annotations of egressgatewayAgent serviceMonitor
      annotations: {}

      ## @param egressgatewayAgent.prometheus.serviceMonitor.labels the additional label of egressgatewayAgent serviceMonitor
      labels: {}

    prometheusRule:
      ## @param egressgatewayAgent.prometheus.prometheusRule.install install prometheusRule for template agent. This requires the prometheus CRDs to be available
      install: false

      ## @param egressgatewayAgent.prometheus.prometheusRule.namespace the prometheusRule namespace. Default to the namespace of helm instance
      namespace: ""

      ## @param egressgatewayAgent.prometheus.prometheusRule.annotations the additional annotations of egressgatewayAgent prometheusRule
      annotations: {}

      ## @param egressgatewayAgent.prometheus.prometheusRule.labels the additional label of egressgatewayAgent prometheusRule
      labels: {}

    grafanaDashboard:
      ## @param egressgatewayAgent.prometheus.grafanaDashboard.install install grafanaDashboard for template agent. This requires the prometheus CRDs to be available
      install: false

      ## @param egressgatewayAgent.prometheus.grafanaDashboard.namespace the grafanaDashboard namespace. Default to the namespace of helm instance
      namespace: ""

      ## @param egressgatewayAgent.prometheus.grafanaDashboard.annotations the additional annotations of egressgatewayAgent grafanaDashboard
      annotations: {}

      ## @param egressgatewayAgent.prometheus.grafanaDashboard.labels the additional label of egressgatewayAgent grafanaDashboard
      labels: {}

  debug:
    ## @param egressgatewayAgent.debug.logLevel the log level of template agent [debug, info, warn, error, fatal, panic]
    logLevel: "info"
    ## @param egressgatewayAgent.debug.gopsPort the gops port of template agent
    gopsPort: 5812

## @section egressgatewayController parameters
##
egressgatewayController:
  ## @param egressgatewayController.name the egressgatewayController name
  name: "egressgateway-controller"

  ## @param egressgatewayController.replicas the replicas number of egressgateway controller
  replicas: 1

  ## @param egressgatewayController.binName the binName name of egressgateway controller
  cmdBinName: "/usr/bin/controller"

  ## @param egressgatewayController.hostNetwork enable host network mode of egressgatewayController pod. Notice, if no CNI available before template installation, must enable this
  hostNetwork: false

  image:
    ## @param egressgatewayController.image.registry the image registry of egressgatewayController
    registry: ghcr.io

    ## @param egressgatewayController.image.repository the image repository of egressgatewayController
    repository: spidernet-io/egressgateway-controller

    ## @param egressgatewayController.image.pullPolicy the image pullPolicy of egressgatewayController
    pullPolicy: IfNotPresent

    ## @param egressgatewayController.image.digest the image digest of egressgatewayController, which takes preference over tag
    digest: ""

    ## @param egressgatewayController.image.tag the image tag of egressgatewayController, overrides the image tag whose default is the chart appVersion.
    tag: ""

    ## @param egressgatewayController.image.imagePullSecrets the image imagePullSecrets of egressgatewayController
    imagePullSecrets: []
    # - name: "image-pull-secret"

  ## @skip egressgatewayController.nodeSelector.kubernetes.io/os
  nodeSelector:
    kubernetes.io/os: linux

  serviceAccount:
    ## @param egressgatewayController.serviceAccount.create create the service account for the egressgatewayController
    create: true
    ## @param egressgatewayController.serviceAccount.annotations the annotations of egressgatewayController service account
    annotations: {}

  service:
    ## @param egressgatewayController.service.annotations the annotations for egressgatewayController service
    annotations: {}
    ## @param egressgatewayController.service.type the type for egressgatewayController service
    type: ClusterIP

  ## @skip egressgatewayController.tolerations
  tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    - key: node.kubernetes.io/not-ready
      effect: NoSchedule
    - key: node-role.kubernetes.io/master
      effect: NoSchedule
    - key: node-role.kubernetes.io/control-plane
      effect: NoSchedule
    - key: CriticalAddonsOnly
      operator: Exists

  ## @param egressgatewayController.priorityClassName the priority Class Name for egressgatewayController
  priorityClassName: "system-node-critical"

  ## @param egressgatewayController.affinity the affinity of egressgatewayController
  affinity: {}

  ## @param egressgatewayController.extraArgs the additional arguments of egressgatewayController container
  extraArgs: []

  ## @param egressgatewayController.extraEnv the additional environment variables of egressgatewayController container
  extraEnv: []

  ## @param egressgatewayController.extraVolumes the additional volumes of egressgatewayController container
  extraVolumes: []
    # - name: test-val
  #   mountPath: /host/tmp

  ## @param egressgatewayController.extraVolumeMounts the additional hostPath mounts of egressgatewayController container
  extraVolumeMounts: []
    # - name: test-val
  #   mountPath: /tmp

  ## @param egressgatewayController.podAnnotations the additional annotations of egressgatewayController pod
  podAnnotations: {}
  # test: 100

  ## @param egressgatewayController.podLabels the additional label of egressgatewayController pod
  podLabels: {}

  ## @param egressgatewayController.securityContext the security Context of egressgatewayController pod
  securityContext: {}
  # runAsUser: 0

  resources:
    ## @param egressgatewayController.resources.limits.cpu the cpu limit of egressgatewayController pod
    ## @param egressgatewayController.resources.limits.memory the memory limit of egressgatewayController pod
    ## @param egressgatewayController.resources.requests.cpu the cpu requests of egressgatewayController pod
    ## @param egressgatewayController.resources.requests.memory the memory requests of egressgatewayController pod
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

  podDisruptionBudget:
    ## @param egressgatewayController.podDisruptionBudget.enabled enable podDisruptionBudget for egressgatewayController pod
    enabled: false

    ## @param egressgatewayController.podDisruptionBudget.minAvailable minimum number/percentage of pods that should remain scheduled.
    minAvailable: 1

  healthServer:
    ## @param egressgatewayController.port the http Port for egressgatewayController, for health checking and http service
    port: 5820

    startupProbe:
      ## @param egressgatewayController.healthServer.startupProbe.failureThreshold the failure threshold of startup probe for egressgatewayController health checking
      failureThreshold: 30

      ## @param egressgatewayController.healthServer.startupProbe.periodSeconds the period seconds of startup probe for egressgatewayController health checking
      periodSeconds: 2

    livenessProbe:
      ## @param egressgatewayController.healthServer.livenessProbe.failureThreshold the failure threshold of startup probe for egressgatewayController health checking
      failureThreshold: 6

      ## @param egressgatewayController.healthServer.livenessProbe.periodSeconds the period seconds of startup probe for egressgatewayController health checking
      periodSeconds: 10

    readinessProbe:
      ## @param egressgatewayController.healthServer.readinessProbe.failureThreshold the failure threshold of startup probe for egressgatewayController health checking
      failureThreshold: 3

      ## @param egressgatewayController.healthServer.readinessProbe.periodSeconds the period seconds of startup probe for egressgatewayController health checking
      periodSeconds: 10

  ## @param egressgatewayController.webhookPort the http port for egressgatewayController webhook
  webhookPort: 5822

  prometheus:
    ## @param egressgatewayController.prometheus.enabled enable template Controller to collect metrics
    enabled: false

    ## @param egressgatewayController.prometheus.port the metrics port of template Controller
    port: 5821

    serviceMonitor:
      ## @param egressgatewayController.prometheus.serviceMonitor.install install serviceMonitor for template agent. This requires the prometheus CRDs to be available
      install: false

      ## @param egressgatewayController.prometheus.serviceMonitor.namespace the serviceMonitor namespace. Default to the namespace of helm instance
      namespace: ""

      ## @param egressgatewayController.prometheus.serviceMonitor.annotations the additional annotations of egressgatewayController serviceMonitor
      annotations: {}

      ## @param egressgatewayController.prometheus.serviceMonitor.labels the additional label of egressgatewayController serviceMonitor
      labels: {}

    prometheusRule:
      ## @param egressgatewayController.prometheus.prometheusRule.install install prometheusRule for template agent. This requires the prometheus CRDs to be available
      install: false

      ## @param egressgatewayController.prometheus.prometheusRule.namespace the prometheusRule namespace. Default to the namespace of helm instance
      namespace: ""

      ## @param egressgatewayController.prometheus.prometheusRule.annotations the additional annotations of egressgatewayController prometheusRule
      annotations: {}

      ## @param egressgatewayController.prometheus.prometheusRule.labels the additional label of egressgatewayController prometheusRule
      labels: {}

    grafanaDashboard:
      ## @param egressgatewayController.prometheus.grafanaDashboard.install install grafanaDashboard for template agent. This requires the prometheus CRDs to be available
      install: false

      ## @param egressgatewayController.prometheus.grafanaDashboard.namespace the grafanaDashboard namespace. Default to the namespace of helm instance
      namespace: ""

      ## @param egressgatewayController.prometheus.grafanaDashboard.annotations the additional annotations of egressgatewayController grafanaDashboard
      annotations: {}

      ## @param egressgatewayController.prometheus.grafanaDashboard.labels the additional label of egressgatewayController grafanaDashboard
      labels: {}

  debug:
    ## @param egressgatewayController.debug.logLevel the log level of template Controller [debug, info, warn, error, fatal, panic]
    logLevel: "info"

    ## @param egressgatewayController.debug.gopsPort the gops port of template Controller
    gopsPort: 5824

  ## TLS configuration for webhook
  tls:
    ## @param egressgatewayController.tls.method the method for generating TLS certificates. [ provided , certmanager , auto]
    ## - provided:     provide all certificates by helm options
    ## - certmanager:  This method use cert-manager to generate & rotate certificates.
    ## - auto:         Auto generate cert.
    method: auto

    ## @param egressgatewayController.tls.secretName the secret name for storing TLS certificates
    secretName: "template-controller-server-certs"

    ## for certmanager method
    certmanager:
      ## @param egressgatewayController.tls.certmanager.certValidityDuration generated certificates validity duration in days for 'certmanager' method
      certValidityDuration: 365

      ## @param egressgatewayController.tls.certmanager.issuerName issuer name of cert manager 'certmanager'. If not specified, a CA issuer will be created.
      issuerName: ""

      ## @param egressgatewayController.tls.certmanager.extraDnsNames extra DNS names added to certificate when it's auto generated
      extraDnsNames: []

      ## @param egressgatewayController.tls.certmanager.extraIPAddresses extra IP addresses added to certificate when it's auto generated
      extraIPAddresses: []

    ## for provided method
    provided:
      ## @param egressgatewayController.tls.provided.tlsCert encoded tls certificate for provided method
      ## @param egressgatewayController.tls.provided.tlsKey encoded tls key for provided method
      ## @param egressgatewayController.tls.provided.tlsCa encoded tls CA for provided method
      tlsCert: ""
      tlsKey: ""
      tlsCa: ""

    ## for auto method
    auto:
      ## @param egressgatewayController.tls.auto.caExpiration ca expiration for auto method
      # in day, default 200 years
      caExpiration: '73000'

      ## @param egressgatewayController.tls.auto.certExpiration server cert expiration for auto method
      # in day, default 200 years
      certExpiration: '73000'

      ## @param egressgatewayController.tls.auto.extraIpAddresses extra IP addresses of server certificate for auto method
      extraIpAddresses: []

      ## @param egressgatewayController.tls.auto.extraDnsNames extra DNS names of server cert for auto method
      extraDnsNames: []
